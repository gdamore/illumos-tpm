#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2010 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
# Copyright (c) 2013 Andrew Stormont.  All rights reserved.
#
#	This makefile contains the common definitions for the sun4v unix
#	and all sun4v implementation architecture dependent modules.
#

#
#	Machine type (implementation architecture):
#
PLATFORM	 = sun4v

#
#	uname -m value
#
UNAME_M		= $(PLATFORM)

#
# Definitions for the platform-specific /platform directories.
#
# PLATFORMS designates those sun4v machines which have no platform
# specific code.
#

#
#	Define supported builds
#
DEF_BUILDS	= $(DEF_BUILDS64)
ALL_BUILDS	= $(ALL_BUILDS64)

#
#	Everybody needs to know how to build modstubs.o and to locate unix.o
#
UNIX_DIR	 = $(UTSBASE)/$(PLATFORM)/unix
GENLIB_DIR	 = $(UTSBASE)/$(PLATFORM)/genunix
MODSTUBS_DIR	 = $(UNIX_DIR)
DSF_DIR		 = $(UTSBASE)/$(PLATFORM)/genassym
LINTS_DIR	 = $(OBJS_DIR)
LINT_LIB_DIR	 = $(UTSBASE)/$(PLATFORM)/lint-libs/$(OBJS_DIR)

UNIX_O		 = $(UNIX_DIR)/$(OBJS_DIR)/unix.o
MODSTUBS_O	 = $(MODSTUBS_DIR)/$(OBJS_DIR)/modstubs.o
GENLIB	 	 = $(GENLIB_DIR)/$(OBJS_DIR)/libgenunix.so

LINT_LIB	 = $(LINT_LIB_DIR)/llib-lunix.ln
GEN_LINT_LIB	 = $(LINT_LIB_DIR)/llib-lgenunix.ln

LINT64_DIRS	 = $(LINT64_BUILDS:%=$(UTSBASE)/$(PLATFORM)/lint-libs/%)
LINT64_FILES	 = $(LINT64_DIRS:%=%/llib-l$(MODULE).ln)

#
#	cpu and platform modules need to know how to build their own symcheck module
#
PLATMOD		 = platmod
PLATLIB		 = $(PLAT_DIR)/$(OBJS_DIR)/libplatmod.so

CPUNAME		 = cpu
CPULIB		 = $(CPU_DIR)/$(OBJS_DIR)/libcpu.so

SYM_MOD		 = $(OBJS_DIR)/unix.sym

#
#	Include the makefiles which define build rule templates, the
#	collection of files per module, and a few specific flags. Note
#	that order is significant, just as with an include path. The
#	first build rule template which matches the files name will be
#	used. By including these in order from most machine dependent
#	to most machine independent, we allow a machine dependent file
#	to be used in preference over a machine independent version
#	(Such as a machine specific optimization, which preserves the
#	interfaces.)
#
include $(UTSBASE)/sun4/Makefile.files
include $(UTSBASE)/$(PLATFORM)/Makefile.files
include $(UTSBASE)/sfmmu/Makefile.files
include $(UTSBASE)/sparc/v9/Makefile.files
include $(UTSBASE)/sparc/Makefile.files
include $(UTSBASE)/sun/Makefile.files
include $(SRC)/psm/promif/$(PROMIF)/common/Makefile.files
include $(SRC)/psm/promif/$(PROMIF)/$(PLATFORM)/Makefile.files
include $(UTSBASE)/common/Makefile.files

#
#	Include machine independent rules. Note that this does not imply
#	that the resulting module from rules in Makefile.uts is	machine
#	independent. Only that the build rules are machine independent.
#
include $(UTSBASE)/Makefile.uts

CTFMERGE_GUDIR	= sun4v

#
#	machine specific optimization, override default in Makefile.master
#
CC_XARCH	= -m64 -xarch=sparcvis
AS_XARCH	= -xarch=v9v
COPTIMIZE	= -xO3
CCMODE		= -Xa

CFLAGS		= -xchip=ultra $(CCABS32) $(CCREGSYM)
CFLAGS		+= $(CC_XARCH)
CFLAGS		+= $(COPTIMIZE)
CFLAGS		+= $(EXTRA_CFLAGS)
CFLAGS		+= $(XAOPT)
CFLAGS		+= $(CCMODE)
CFLAGS		+= $(SPACEFLAG)
CFLAGS		+= $(CERRWARN)
CFLAGS		+= $(CTF_FLAGS_$(CLASS))
CFLAGS		+= $(C99MODE)
CFLAGS		+= $(CCUNBOUND)
CFLAGS		+= $(CCNOAUTOINLINE)
CFLAGS		+= $(CCSTATICSYM)
CFLAGS		+= $(CC32BITCALLERS)
CFLAGS		+= $(IROPTFLAG)
CFLAGS		+= $(CGLOBALSTATIC)
CFLAGS		+= -xregs=no%float
CFLAGS		+= -xstrconst
CFLAGS		+= $(CSOURCEDEBUGFLAGS)
CFLAGS		+= $(CUSERFLAGS)

CPPFLAGS	+= -DGLREG

ASFLAGS		+= $(AS_XARCH) -DGLREG

AS_INC_PATH	+= -I$(DSF_DIR)/$(OBJS_DIR)

LINT_KMODS	+= $(GENUNIX_KMODS)

LINT_DEFS	= -m64

#
#	The following must be defined for all implementations:
#
#	MAPFILE:		ld mapfile for the build of kernel/unix.
#	MODSTUBS:		Module stubs source file.
#	GENCONST_SRC:		genconst.c
#	OFFSETS:		offsets.in
#	PLATFORM_OFFSETS:	Platform specific mach_offsets.in
#	FDOFFSETS:		fd_offsets.in
#
MAPFILE		 = $(UTSBASE)/sun4/conf/Mapfile
MODSTUBS	 = $(UTSBASE)/sparc/ml/modstubs.s
GENCONST_SRC	 = $(UTSBASE)/sun4/ml/genconst.c
OFFSETS		 = $(UTSBASE)/sun4/ml/offsets.in
PLATFORM_OFFSETS = $(UTSBASE)/sun4v/ml/mach_offsets.in
FDOFFSETS 	 = $(UTSBASE)/sun/io/fd_offsets.in

#
#	Define the actual specific platforms
#

MACHINE_DEFS	= -D$(PLATFORM) -D_MACHDEP -DSFMMU
MACHINE_DEFS	+= -DMAX_MEM_NODES=8

#
#	Software workarounds for hardware "features"
#

include $(UTSBASE)/$(PLATFORM)/Makefile.workarounds

#
#	Debugging level
#
#	Special knowledge of which special debugging options effect which
#	file is used to optimize the build if these flags are changed.
#
#	XXX: The above could possibly be done for more flags and files, but
#	     is left as an experiment to the interested reader. Be forewarned,
#	     that excessive use could lead to maintenance difficulties.
#
#	Note: kslice can be enabled for the sun4v, but is disabled by default
#	      in all cases.
#

DEBUG_DEFS_OBJ64	=
DEBUG_DEFS_DBG64	= -DDEBUG
DEBUG_DEFS		= $(DEBUG_DEFS_$(BUILD_TYPE))

DEBUG_COND_OBJ64	= $(POUND_SIGN)
DEBUG_COND_DBG64	=

ALL_DEFS	 = $(MACHINE_DEFS) $(WORKAROUND_DEFS) $(DEBUG_DEFS) \
		   $(OPTION_DEFS)
GENCONST_DEFS	 = $(MACHINE_DEFS) $(OPTION_DEFS)

#
#	The kernels modules which are "implementation architecture"
#	specific for this machine are enumerated below. Note that most
#	of these modules must exist (in one form or another) for each
#	architecture.
#
#	Common Drivers (usually pseudo drivers) (/kernel/drv):
#

#
#	Machine Specific Driver Modules (/kernel/drv):
#
DRV_KMODS	+= tpm
